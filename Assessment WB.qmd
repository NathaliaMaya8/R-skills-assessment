---
title: Assessment WB
Author: Nathalia Maya Scarpeta
format: html
editor: visual

project:
  type: website
  output-dir: docs
---

```{r}
library(tidyverse)
library(radiant.data)
library (spatstat)
library(waldo)
library(ggplot2)
library(dplyr)
library(dineq)
library(collapse)
```

##
```{r}
tag      <- "202311081903"
base_url <- "https://github.com/randrescastaneda/pub_data/raw/"
data_url <- paste0(base_url, tag, "/data/Rtest1/")

wdi <-
  readr::read_rds(paste0(data_url, "wdi_in1.Rds"))
```

# 1. Summary statistics of GDP per capita by region

```{r}
wdi_result_1 <- readr::read_rds(paste0(data_url, "wdi_summ_out.Rds"))

GDP_byregion <- wdi |>
  group_by(region, date) |>
  summarise(
    N = sum(!is.na(gdp)),  # Count of non-missing observations
    Mean = weighted.mean(gdp, pop, na.rm = TRUE),  # Mean GDP per capita
    SD = weighted.sd(gdp, pop, na.rm = TRUE),      # Standard deviation
    Min = min(gdp, na.rm = TRUE),    # Minimum GDP per capita
    Max = max(gdp, na.rm = TRUE)     # Maximum GDP per capita
    ) |>
  rename (year = date)

head(GDP_byregion)

```
# 2. Aggregate stats
```{r}
# Group by region and date, calculate population-weighted statistics
wdi_result_2 <- readr::read_rds(paste0(data_url, "wdi_agg_out.Rds"))

aggregate_estimates <- wdi |>
  group_by(region, date) |>
  summarise(
    population = sum(pop),  # Total population for the region and year
    
    lifeex_mean = weighted.mean(lifeex, pop, na.rm = TRUE),
    gdp_mean = weighted.mean(gdp, pop, na.rm = TRUE),
    povintl_mean = weighted.mean(pov_intl, pop, na.rm = TRUE),
    
    lifeex_sd = weighted.sd(gdp, pop, na.rm = TRUE),
    gdp_sd = weighted.sd(gdp, pop, na.rm = TRUE),
    povintl_sd = weighted.sd(pov_intl, pop, na.rm = TRUE),
    
    
    lifeex_min = min(lifeex),
    gdp_min = min(gdp),
    povintl_min = min(pov_intl),
    
    
    lifeex_max = max(lifeex),
    gdp_max = max(gdp),
    povintl_max = max(pov_intl),
    
    
    lifeex_median = weighted.median(lifeex, pop, na.rm = TRUE),
    gdp_median = weighted.median(gdp, pop, na.rm = TRUE),
    povintl_median = weighted.median(pov_intl, pop, na.rm = TRUE)
  ) |>
  pivot_longer(
    cols = starts_with("lifeex_") | 
      starts_with("gdp_") | 
      starts_with("povintl_"),
    names_to = c(".value", "estimate"),
    names_sep = "_"
  ) |>
   rename (pov_intl = povintl) |>
   rename (pop = population) |>
  select(estimate, region, date, pop, lifeex, gdp, pov_intl) |>
  arrange(match(estimate, c("mean", "sd", "min", "max", "median")))
  
head(aggregate_estimates)
```
# 3. Find outliers 

```{r}
wdi_outliers_out <- readr::read_rds(paste0(data_url, "wdi_outliers_out.Rds"))

outliers <- wdi |>
  group_by(date) |>
  mutate(mean_lifeex = weighted.mean(lifeex, pop, na.rm = TRUE),
         sd_lifeex = weighted.sd(lifeex, pop, na.rm = TRUE),
         z_lifeex = (lifeex - mean_lifeex) / sd_lifeex,
         hl_lifeex = abs(z_lifeex) < -2.5,  # True if above 2.5 SD
         ll_lifeex = abs(z_lifeex) > 2.5,  # True if below 2.5 SD
         
         mean_gdp = weighted.mean(gdp, pop, na.rm = TRUE),
         sd_gdp = weighted.sd(gdp, pop, na.rm = TRUE),
         z_gdp = (gdp - mean_gdp) / sd_gdp,
         hl_gdp = abs(z_gdp) < -2.5,  # True if above 2.5 SD
         ll_gdp = abs(z_gdp) > 2.5,  # True if below 2.5 SD
         
         mean_gini = weighted.mean(gini, pop, na.rm = TRUE),
         sd_gini = weighted.sd(gini, pop, na.rm = TRUE),
         z_gini = (gini - mean_gini) / sd_gini,
         hl_gini = abs(z_gini) < -2.5,  # True if above 2.5 SD
         ll_gini = abs(z_gini) > 2.5  # True if below 2.5 SD
         ) |>
  select(!(starts_with("z_"))
         
  )

  head(outliers)

```

#Graph

```{r}
  ggplot(outliers) +
    geom_ribbon(
      aes(x = date, ymin = mean_lifeex - 2.5 * sd_lifeex, ymax = mean_lifeex + 2.5 * sd_lifeex),
      fill = "gray80") +
    geom_smooth(aes(x = date, y = mean_lifeex))  +  # Add the confidence interval as a gray shadow
    geom_point(aes(x = date, y = lifeex, color = region), se = FALSE) +  # Add points for each country
    theme_minimal() +
    theme(
      legend.position = "bottom",  # Set legend position to bottom
      legend.box = "horizontal",   # Display legend in horizontal layout
    ) + 
    guides(color = guide_legend(title = NULL) )  # Remove the legend title

```

## SIMULATED DATA

```{r}
  l_svy <-
    readr::read_rds(paste0(data_url, "svy_sim_in1.Rds"))
  
  l_svy <- Map(function(df, year) mutate(df, Year = year), l_svy, names(l_svy))
   
   svy_2001_2010 <- bind_rows(l_svy)
  
   #Removing the character "Y" before year
   svy_2001_2010$Year <- as.integer(sub("Y", "",  svy_2001_2010$Year))
   
   #svy_2001_2010 <- svy_2001_2010 |>
     #select(-year) 
   
   # Define the poverty lines in 2017 PPP prices
   pov_line <- c(2.15, 3.65, 6.85)
   
   # Function to calculate the FGT indices for a given poverty line
   calculate_FGT <- function(data, line) {
     data |>
       group_by(Year) |>
       summarise(
         headcount = sum(weight * (income < line)) / sum(weight),
         pov_gap = sum((1 - (income / line)) * (income < line) * weight) / sum(weight),
         povseverity = sum((1 - (income / line))^2 * (income < line) * weight) / sum(weight)
       ) |>
       mutate(poverty_line = line)
   }
   
   poverty_indicators <- pov_line |>
     map_df(~ calculate_FGT(svy_2001_2010, .))

     head(poverty_indicators)

```
# GRAPH
     
```{r}
     ggplot(poverty_indicators, aes(group = poverty_line)) +
       geom_line(aes(x = Year, y = headcount, color = factor (poverty_line ))) +
       geom_point(aes(x = Year, y = headcount, color = factor (poverty_line ))) +
       theme_minimal ()
```

# 5. Lorenz curve


```{r}
     svy_2001_2010_lorenz <- svy_2001_2010 |>
       select(Year, income, weight) |>
       group_by(Year) |>
       mutate(wtd_ptile = lag(cumsum(weight), default = 0)/(sum(weight) - 1),
              bin = ntiles.wtd(wtd_ptile, 100, weights = weight),
               n=n(),
               total_income = sum(income),
               weight_ = mean(weight),
               mean_income = weighted.mean(income, weight_)
              )|>
      group_by(Year, bin)|>
      summarise (total_income_ = weighted.mean(total_income, weight),
             welfare = max(income),
             prop_population = 1/100,
             
             ) |>
      ungroup()|>
      
      group_by(Year) |>
      mutate (mean_welfare = welfare/total_income_, 
          cum_population = cumsum(prop_population),
          cum_welfare = cumsum(mean_welfare)
  ) |>
       
       select(welfare, cum_welfare, cum_population, Year, bin)

      head(svy_2001_2010_lorenz )
```

## 6. Gini coefficient

```{r}
gini <- l_svy |>
  map_df(~ as.data.frame(.x), .id = "year") |>
  mutate(year = as.numeric(gsub("[A-Za-z]", "", year)))


md_compute_gini <- function(welfare, weight) {

  #weighted welfare
  
  weighted_welfare <- welfare * weight
  weighted_welfare_lag <- collapse::flag(weighted_welfare, fill = 0)

  # Area under the curve using
  
  v <- (cumsum(weighted_welfare_lag) + (weighted_welfare / 2)) * weight
  area_under <- sum(v) # Area Under the Curve

  # Area Under the Lorenz Curve
  area_under <- (area_under / sum(weight)) / sum(weighted_welfare)   # Normalizing


  # Compute Gini
  gini <- 1 - (2 * area_under)

  return(gini)
}

gini_final <- gini |>
  group_by(year) |>
  summarise(gini = md_compute_gini(income, weight))
head(gini_final)
```

##GRAPH

```{r}
graph <- ggplot(gini_final, aes(x = year, y = gini)) +
  geom_line() +
  geom_point() +
  theme_minimal()

print(graph)

```

copy NUL .nojekyll



